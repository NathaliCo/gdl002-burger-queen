{"version":3,"sources":["logo.svg","Components/Header.js","Components/Menu.js","Components/Command.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","Component","Menu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","printMenuDesayuno","printMenuMeal","state","menu","onClick","printMenuBreakfast","Command","App","src_Components_Header","src_Components_Menu","src_Components_Command","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yOCiBvBC,0LAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAAlB,UACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAlB,QACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAlB,kBARQC,cC0BJC,qBA1Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,kBAAoB,aAPDP,EAWnBQ,cAAgB,aATZR,EAAKS,MAAQ,CACTC,KAAM,IAHKV,wEAgBf,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXH,EAAAC,EAAAC,cAAA,UAAQC,UAAY,oBAAoBe,QAASR,KAAKS,oBAAtD,YACAnB,EAAAC,EAAAC,cAAA,UAAQC,UAAY,oBAAoBe,QAASR,KAAKK,eAAtD,kBArBGX,cCYFgB,0LATX,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,0BAJYE,cCuBPiB,MAnBf,WACE,OACErB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACjBH,EAAAC,EAAAC,cAACqB,EAAD,OAEAvB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACjBH,EAAAC,EAAAC,cAACsB,EAAD,UCJgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2163ed6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"header\">\r\n          <h1>Burguer Queen</h1>\r\n          <div className = \"buttonsWho\">\r\n             <button className=\"btn btn-secondary active\">Waiter</button>\r\n             <button className=\"btn btn-secondary\">Chef</button>\r\n             <button className=\"btn btn-secondary\">Owner</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  } \r\n  export default Header\r\n  \r\n  ","import React, { Component } from 'react';\r\nimport './Menu.css';\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menu: []\r\n        };\r\n    };\r\n\r\n    printMenuDesayuno = () => {\r\n        \r\n    }\r\n    \r\n    printMenuMeal = () => {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"menuTable\">\r\n            \r\n                <button className = \"btn btn-secondary\" onClick={this.printMenuBreakfast}>Desayuno</button>\r\n                <button className = \"btn btn-secondary\" onClick={this.printMenuMeal}>Comida</button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n  export default Menu","import React, { Component } from 'react';\r\nimport './Command.css';\r\n\r\nclass Command extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"command\">\r\n          <p>Order</p>\r\n         \r\n          </div>\r\n        \r\n      );\r\n    }\r\n  } \r\n  export default Command","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  Header from './Components/Header';\nimport  Menu from './Components/Menu';\nimport  Command from './Components/Command';\n\nfunction App() {\n  return (\n    <div>\n    <Header />\n    <div className = \"container\">\n    <div className = \"col\">\n    <Menu />\n    </div>\n    <div className = \"col\">\n    <Command />\n    </div>\n    </div>\n    </div>\n    \n    \n  );\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}